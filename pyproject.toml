[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quarkdown-mcp"
version = "1.0.0"
description = "A Model Context Protocol (MCP) server for Quarkdown document processing"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Quarkdown MCP Team", email = "contact@quarkdown-mcp.dev"},
]
maintainers = [
    {name = "Quarkdown MCP Team", email = "contact@quarkdown-mcp.dev"},
]
keywords = [
    "mcp",
    "model-context-protocol",
    "quarkdown",
    "markdown",
    "document-processing",
    "ai-tools",
    "llm-tools",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Topic :: Documentation",
]

# Core dependencies
dependencies = [
    "mcp>=1.0.0",
    "pathlib2>=2.3.0; python_version<'3.4'",
    "typing-extensions>=4.0.0; python_version<'3.8'",
]

# Optional dependencies
[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.2.0",
]

lint = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "autoflake>=2.0.0",
]

docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.22.0",
]

performance = [
    "psutil>=5.9.0",
    "aiofiles>=23.0.0",
    "memory-profiler>=0.60.0",
]

security = [
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

debug = [
    "ipdb>=0.13.0",
    "rich>=13.0.0",
]

build = [
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.40.0",
]

analysis = [
    "radon>=6.0.0",
    "xenon>=0.9.0",
]

# All development dependencies
dev = [
    "quarkdown-mcp[test,lint,docs,performance,security,debug,build,analysis]",
]

# All optional dependencies
all = [
    "quarkdown-mcp[dev]",
]

[project.urls]
"Homepage" = "https://github.com/your-org/quarkdown-mcp"
"Bug Reports" = "https://github.com/your-org/quarkdown-mcp/issues"
"Source" = "https://github.com/your-org/quarkdown-mcp"
"Documentation" = "https://quarkdown-mcp.readthedocs.io/"
"Changelog" = "https://github.com/your-org/quarkdown-mcp/blob/main/CHANGELOG.md"

[project.scripts]
quarkdown-mcp = "quarkdown_mcp.server:main"

# Setuptools configuration
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
quarkdown_mcp = ["*.json", "*.yaml", "*.yml", "templates/*", "config/*", "py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101", "B601"]

# Flake8 configuration (since flake8 doesn't support pyproject.toml natively)
# Note: This configuration may need to be in setup.cfg instead
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
    ".pytest_cache"
]